/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DATETIMESETTERFLATBASE_HPP
#define DATETIMESETTERFLATBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include "DateTime.hpp"
#include <touchgfx/widgets/Box.hpp>
#include <gui/containers/DateTimeSetterMasksBottom.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/DateTimeSetter2DigitsN.hpp>
#include <gui/containers/DateTimeSetter4DigitsN.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>

class DateTimeSetterFlatBase : public touchgfx::Container
{
public:
    DateTimeSetterFlatBase();
    virtual ~DateTimeSetterFlatBase();
    virtual void initialize();

    virtual void secondWheelUpdateItem(DateTimeSetter2DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    virtual void minuteWheelUpdateItem(DateTimeSetter2DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    virtual void hourWheelUpdateItem(DateTimeSetter2DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    virtual void dayWheelUpdateItem(DateTimeSetter2DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    virtual void monthWheelUpdateItem(DateTimeSetter2DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    virtual void yearWheelUpdateItem(DateTimeSetter4DigitsN& item, int16_t itemIndex)
    {
        // Override and implement this function in DateTimeSetterFlat
    }

    /*
     * Custom Actions
     */
    virtual void setValue(DateTime& value)
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Custom Trigger Callback Setters
     */
    void setValueChangedCallback(touchgfx::GenericCallback<DateTime&>& callback)
    {
        this->valueChangedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitValueChangedCallback(DateTime& value)
    {
        if (valueChangedCallback && valueChangedCallback->isValid())
        {
            this->valueChangedCallback->execute( value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box background;
    DateTimeSetterMasksBottom dateTimeSetterMasksBottom;
    touchgfx::Container separators;
    touchgfx::TextArea ts2;
    touchgfx::TextArea ts1;
    touchgfx::TextArea ds2;
    touchgfx::TextArea ds1;
    touchgfx::Container digits;
    touchgfx::ScrollWheel secondWheel;
    touchgfx::DrawableListItems<DateTimeSetter2DigitsN, 8> secondWheelListItems;
    touchgfx::ScrollWheel minuteWheel;
    touchgfx::DrawableListItems<DateTimeSetter2DigitsN, 8> minuteWheelListItems;
    touchgfx::ScrollWheel hourWheel;
    touchgfx::DrawableListItems<DateTimeSetter2DigitsN, 8> hourWheelListItems;
    touchgfx::ScrollWheel dayWheel;
    touchgfx::DrawableListItems<DateTimeSetter2DigitsN, 8> dayWheelListItems;
    touchgfx::ScrollWheel monthWheel;
    touchgfx::DrawableListItems<DateTimeSetter2DigitsN, 8> monthWheelListItems;
    touchgfx::ScrollWheel yearWheel;
    touchgfx::DrawableListItems<DateTimeSetter4DigitsN, 8> yearWheelListItems;
    touchgfx::Box screenBottom;
    touchgfx::Box screenTop;
    touchgfx::Line lineBottom;
    touchgfx::PainterRGB888 lineBottomPainter;
    touchgfx::Line lineTop;
    touchgfx::PainterRGB888 lineTopPainter;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<DateTime&>* valueChangedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DateTimeSetterFlatBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // DATETIMESETTERFLATBASE_HPP
