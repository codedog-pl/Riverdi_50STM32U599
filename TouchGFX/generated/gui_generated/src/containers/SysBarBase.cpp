/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/SysBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SysBarBase::SysBarBase() :
    setClockCallback(0),
    flexButtonCallback(this, &SysBarBase::flexButtonCallbackHandler)
{
    setWidth(800);
    setHeight(48);
    background.setPosition(0, 0, 800, 48);
    background.setColor(touchgfx::Color::getColorFromRGB(17, 147, 193));
    background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 130, 173));
    background.setBorderSize(2);
    add(background);

    clockTxt.setPosition(248, 4, 305, 40);
    clockTxt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    clockTxt.setLinespacing(0);
    Unicode::snprintf(clockTxtBuffer, CLOCKTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C1M8).getText());
    clockTxt.setWildcard(clockTxtBuffer);
    clockTxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OC0E));
    add(clockTxt);

    setClockBtn.setBoxWithBorderPosition(0, 0, 305, 48);
    setClockBtn.setBorderSize(5);
    setClockBtn.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    setClockBtn.setAlpha(0);
    setClockBtn.setAction(flexButtonCallback);
    setClockBtn.setPosition(248, 0, 305, 48);
    add(setClockBtn);

touchgfx::Application::getInstance()->registerTimerWidget(this);
}

SysBarBase::~SysBarBase()
{
touchgfx::Application::getInstance()->unregisterTimerWidget(this);
}

void SysBarBase::initialize()
{

}

void SysBarBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &setClockBtn)
    {
        //SetClockClick
        //When setClockBtn clicked emit setClock callback
        //Emit callback
        emitSetClockCallback();
    }
}

void SysBarBase::handleTickEvent()
{
    //FrameTickUpdate
    //When every N tick call virtual function
    //Call updateTime
    updateTime();
}
