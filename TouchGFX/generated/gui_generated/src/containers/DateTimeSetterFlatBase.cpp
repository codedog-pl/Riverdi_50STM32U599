/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/DateTimeSetterFlatBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DateTimeSetterFlatBase::DateTimeSetterFlatBase() :
    valueChangedCallback(0),
    updateItemCallback(this, &DateTimeSetterFlatBase::updateItemCallbackHandler)
{
    setWidth(480);
    setHeight(272);
    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(background);

    dateTimeSetterMasksBottom.setXY(0, 0);
    dateTimeSetterMasksBottom.setVisible(false);
    add(dateTimeSetterMasksBottom);

    separators.setPosition(0, 112, 480, 48);
    ts2.setXY(388, -9);
    ts2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ts2.setLinespacing(0);
    ts2.setTypedText(touchgfx::TypedText(T__DTS_TS));
    separators.add(ts2);

    ts1.setXY(328, -9);
    ts1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ts1.setLinespacing(0);
    ts1.setTypedText(touchgfx::TypedText(T__DTS_TS));
    separators.add(ts1);

    ds2.setXY(194, -6);
    ds2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ds2.setLinespacing(0);
    ds2.setTypedText(touchgfx::TypedText(T__DTS_DS));
    separators.add(ds2);

    ds1.setXY(130, -6);
    ds1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ds1.setLinespacing(0);
    ds1.setTypedText(touchgfx::TypedText(T__DTS_DS));
    separators.add(ds1);

    add(separators);

    digits.setPosition(0, 0, 480, 272);
    secondWheel.setPosition(399, 0, 50, 272);
    secondWheel.setHorizontal(false);
    secondWheel.setCircular(true);
    secondWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    secondWheel.setSwipeAcceleration(80);
    secondWheel.setDragAcceleration(20);
    secondWheel.setNumberOfItems(60);
    secondWheel.setSelectedItemOffset(112);
    secondWheel.setOvershootPercentage(75);
    secondWheel.setDrawableSize(44, 0);
    secondWheel.setDrawables(secondWheelListItems, updateItemCallback);
    secondWheel.animateToItem(30, 0);
    digits.add(secondWheel);

    minuteWheel.setPosition(339, 0, 50, 272);
    minuteWheel.setHorizontal(false);
    minuteWheel.setCircular(true);
    minuteWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    minuteWheel.setSwipeAcceleration(80);
    minuteWheel.setDragAcceleration(20);
    minuteWheel.setNumberOfItems(60);
    minuteWheel.setSelectedItemOffset(112);
    minuteWheel.setOvershootPercentage(75);
    minuteWheel.setDrawableSize(44, 0);
    minuteWheel.setDrawables(minuteWheelListItems, updateItemCallback);
    minuteWheel.animateToItem(30, 0);
    digits.add(minuteWheel);

    hourWheel.setPosition(279, 0, 50, 272);
    hourWheel.setHorizontal(false);
    hourWheel.setCircular(true);
    hourWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    hourWheel.setSwipeAcceleration(40);
    hourWheel.setDragAcceleration(20);
    hourWheel.setNumberOfItems(24);
    hourWheel.setSelectedItemOffset(112);
    hourWheel.setOvershootPercentage(75);
    hourWheel.setDrawableSize(44, 0);
    hourWheel.setDrawables(hourWheelListItems, updateItemCallback);
    hourWheel.animateToItem(12, 0);
    digits.add(hourWheel);

    dayWheel.setPosition(209, 0, 50, 272);
    dayWheel.setHorizontal(false);
    dayWheel.setCircular(true);
    dayWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    dayWheel.setSwipeAcceleration(40);
    dayWheel.setDragAcceleration(20);
    dayWheel.setNumberOfItems(31);
    dayWheel.setSelectedItemOffset(112);
    dayWheel.setOvershootPercentage(75);
    dayWheel.setDrawableSize(44, 0);
    dayWheel.setDrawables(dayWheelListItems, updateItemCallback);
    dayWheel.animateToItem(15, 0);
    digits.add(dayWheel);

    monthWheel.setPosition(145, 0, 50, 272);
    monthWheel.setHorizontal(false);
    monthWheel.setCircular(true);
    monthWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    monthWheel.setSwipeAcceleration(40);
    monthWheel.setDragAcceleration(20);
    monthWheel.setNumberOfItems(12);
    monthWheel.setSelectedItemOffset(112);
    monthWheel.setOvershootPercentage(75);
    monthWheel.setDrawableSize(44, 0);
    monthWheel.setDrawables(monthWheelListItems, updateItemCallback);
    monthWheel.animateToItem(6, 0);
    digits.add(monthWheel);

    yearWheel.setPosition(32, 0, 99, 272);
    yearWheel.setHorizontal(false);
    yearWheel.setCircular(false);
    yearWheel.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    yearWheel.setSwipeAcceleration(40);
    yearWheel.setDragAcceleration(20);
    yearWheel.setNumberOfItems(86);
    yearWheel.setSelectedItemOffset(112);
    yearWheel.setOvershootPercentage(75);
    yearWheel.setDrawableSize(44, 0);
    yearWheel.setDrawables(yearWheelListItems, updateItemCallback);
    yearWheel.animateToItem(43, 0);
    digits.add(yearWheel);

    add(digits);

    screenBottom.setPosition(0, 0, 480, 113);
    screenBottom.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    screenBottom.setAlpha(239);
    add(screenBottom);

    screenTop.setPosition(0, 160, 480, 112);
    screenTop.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    screenTop.setAlpha(239);
    add(screenTop);

    lineBottom.setPosition(0, 151, 480, 15);
    lineBottomPainter.setColor(touchgfx::Color::getColorFromRGB(0, 174, 255));
    lineBottom.setPainter(lineBottomPainter);
    lineBottom.setStart(0, 8);
    lineBottom.setEnd(480, 8);
    lineBottom.setLineWidth(1);
    lineBottom.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    add(lineBottom);

    lineTop.setPosition(0, 106, 480, 15);
    lineTopPainter.setColor(touchgfx::Color::getColorFromRGB(0, 174, 255));
    lineTop.setPainter(lineTopPainter);
    lineTop.setStart(0, 8);
    lineTop.setEnd(480, 8);
    lineTop.setLineWidth(1);
    lineTop.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    add(lineTop);
}

DateTimeSetterFlatBase::~DateTimeSetterFlatBase()
{

}

void DateTimeSetterFlatBase::initialize()
{
    dateTimeSetterMasksBottom.initialize();
    secondWheel.initialize();
    for (int i = 0; i < secondWheelListItems.getNumberOfDrawables(); i++)
    {
        secondWheelListItems[i].initialize();
    }
    minuteWheel.initialize();
    for (int i = 0; i < minuteWheelListItems.getNumberOfDrawables(); i++)
    {
        minuteWheelListItems[i].initialize();
    }
    hourWheel.initialize();
    for (int i = 0; i < hourWheelListItems.getNumberOfDrawables(); i++)
    {
        hourWheelListItems[i].initialize();
    }
    dayWheel.initialize();
    for (int i = 0; i < dayWheelListItems.getNumberOfDrawables(); i++)
    {
        dayWheelListItems[i].initialize();
    }
    monthWheel.initialize();
    for (int i = 0; i < monthWheelListItems.getNumberOfDrawables(); i++)
    {
        monthWheelListItems[i].initialize();
    }
    yearWheel.initialize();
    for (int i = 0; i < yearWheelListItems.getNumberOfDrawables(); i++)
    {
        yearWheelListItems[i].initialize();
    }
}

void DateTimeSetterFlatBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &secondWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter2DigitsN* cc = (DateTimeSetter2DigitsN*)d;
        secondWheelUpdateItem(*cc, itemIndex);
    }

    if (items == &minuteWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter2DigitsN* cc = (DateTimeSetter2DigitsN*)d;
        minuteWheelUpdateItem(*cc, itemIndex);
    }

    if (items == &hourWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter2DigitsN* cc = (DateTimeSetter2DigitsN*)d;
        hourWheelUpdateItem(*cc, itemIndex);
    }

    if (items == &dayWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter2DigitsN* cc = (DateTimeSetter2DigitsN*)d;
        dayWheelUpdateItem(*cc, itemIndex);
    }

    if (items == &monthWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter2DigitsN* cc = (DateTimeSetter2DigitsN*)d;
        monthWheelUpdateItem(*cc, itemIndex);
    }

    if (items == &yearWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DateTimeSetter4DigitsN* cc = (DateTimeSetter4DigitsN*)d;
        yearWheelUpdateItem(*cc, itemIndex);
    }
}
